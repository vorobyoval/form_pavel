/*
 * Demografic mark tool
 * Demografic mark tool API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Author', 'model/AuthorPost'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Author'), require('../model/AuthorPost'));
  } else {
    // Browser globals (root is window)
    if (!root.DemograficMarkTool) {
      root.DemograficMarkTool = {};
    }
    root.DemograficMarkTool.AuthorsApi = factory(root.DemograficMarkTool.ApiClient, root.DemograficMarkTool.Author, root.DemograficMarkTool.AuthorPost);
  }
}(this, function(ApiClient, Author, AuthorPost) {
  'use strict';

  /**
   * Authors service.
   * @module api/AuthorsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AuthorsApi. 
   * @alias module:api/AuthorsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAuthorsList operation.
     * @callback module:api/AuthorsApi~getAuthorsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Author>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of authors
     * Loads list of authors to label
     * @param {String} sourceName Source name
     * @param {String} userId user, who labels data
     * @param {Number} limit list limit
     * @param {Number} offset list offser
     * @param {module:api/AuthorsApi~getAuthorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Author>}
     */
    this.getAuthorsList = function(sourceName, userId, limit, offset, callback) {
      var postBody = null;

      // verify the required parameter 'sourceName' is set
      if (sourceName === undefined || sourceName === null) {
        throw new Error("Missing the required parameter 'sourceName' when calling getAuthorsList");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAuthorsList");
      }

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getAuthorsList");
      }

      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getAuthorsList");
      }


      var pathParams = {
      };
      var queryParams = {
        'sourceName': sourceName,
        'userId': userId,
        'limit': limit,
        'offset': offset,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Author];

      return this.apiClient.callApi(
        '/authors/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorsPostsList operation.
     * @callback module:api/AuthorsApi~getAuthorsPostsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuthorPost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of author posts
     * Loads list of authors posts
     * @param {Number} authorId Author id
     * @param {Number} limit list limit
     * @param {Number} offset list offset
     * @param {module:api/AuthorsApi~getAuthorsPostsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AuthorPost>}
     */
    this.getAuthorsPostsList = function(authorId, limit, offset, callback) {
      var postBody = null;

      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling getAuthorsPostsList");
      }

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getAuthorsPostsList");
      }

      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getAuthorsPostsList");
      }


      var pathParams = {
        'authorId': authorId
      };
      var queryParams = {
        'limit': limit,
        'offset': offset,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AuthorPost];

      return this.apiClient.callApi(
        '/authors/{authorId}/posts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the labelAuthor operation.
     * @callback module:api/AuthorsApi~labelAuthorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Label author
     * Label author
     * @param {String} authorId Author id
     * @param {String} userId user, who labels data
     * @param {String} label Label name
     * @param {module:api/AuthorsApi~labelAuthorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.labelAuthor = function(authorId, userId, label, callback) {
      var postBody = null;

      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling labelAuthor");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling labelAuthor");
      }

      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling labelAuthor");
      }


      var pathParams = {
        'authorId': authorId
      };
      var queryParams = {
        'userId': userId,
        'label': label,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/authors/{authorId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
